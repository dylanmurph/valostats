<?php
//This code segment is fully generated by ChatGPT
namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Str;
use App\Models\Player;
use App\Models\Agent;
use App\Models\ValorantMap;
use App\Models\PlayerAgentStat;
use App\Models\PlayerMapStat;

class FullStatSeeder extends Seeder
{
    public function run(): void
    {
        $regions = ['EU', 'NA', 'APAC'];
        $agents = Agent::all();
        $maps = ValorantMap::all();

        foreach (range(1, 30) as $i) {
            // Core player stats
            $gamesPlayed = rand(150, 300);
            $wins = rand((int)($gamesPlayed * 0.5), (int)($gamesPlayed * 0.8));
            $losses = $gamesPlayed - $wins;
            $totalKills = rand(1500, 3000);
            $totalHeadshots = rand((int)($totalKills * 0.2), (int)($totalKills * 0.4));
            $headshotPct = round(($totalHeadshots / $totalKills) * 100, 2);

            // Create Player
            $player = Player::create([
                'username' => $this->generateGamertag(),
                'region' => $regions[array_rand($regions)],
                'elo' => rand(1000, 2600),
                'total_kills' => $totalKills,
                'games_played' => $gamesPlayed,
                'wins' => $wins,
                'losses' => $losses,
                'headshot_pct' => $headshotPct,
            ]);

            /**
             * MAP STATS — One for every map
             */
            $mapKillBudget = $totalKills;
            $mapMatchBudget = $gamesPlayed;
            $mapsShuffled = $maps->shuffle();

            foreach ($mapsShuffled->values() as $index => $map) {
                $isLast = $index === $maps->count() - 1;

                $kills = $isLast ? $mapKillBudget : rand(50, (int)($mapKillBudget / ($maps->count() - $index)));
                $mapKillBudget -= $kills;

                $matchesPlayed = $isLast ? $mapMatchBudget : rand(5, (int)($mapMatchBudget / ($maps->count() - $index)));
                $mapMatchBudget -= $matchesPlayed;

                PlayerMapStat::create([
                    'player_id' => $player->id,
                    'map_id' => $map->id,
                    'matches_played' => $matchesPlayed,
                    'total_kills' => $kills,
                    'kda_ratio' => round(rand(120, 300) / 100, 2),
                    'win_rate' => round(rand(4000, 7000) / 100, 2),
                    'headshot_pct' => round(rand(1800, 3000) / 100, 2),
                    'average_damage' => rand(130, 250),
                ]);
            }

            /**
             * AGENT STATS — 4 to 10 diverse agents
             */
            $numAgents = rand(4, min(10, $agents->count()));
            $selectedAgents = $agents->shuffle()->take($numAgents);

            $agentKillBudget = $totalKills;
            $agentMatchBudget = $gamesPlayed;

            foreach ($selectedAgents->values() as $index => $agent) {
                $isLast = $index === $selectedAgents->count() - 1;

                $kills = $isLast ? $agentKillBudget : rand(100, (int)($agentKillBudget / ($selectedAgents->count() - $index)));
                $agentKillBudget -= $kills;

                $matchesPlayed = $isLast ? $agentMatchBudget : rand(10, (int)($agentMatchBudget / ($selectedAgents->count() - $index)));
                $agentMatchBudget -= $matchesPlayed;

                PlayerAgentStat::create([
                    'player_id' => $player->id,
                    'agent_id' => $agent->id,
                    'matches_played' => $matchesPlayed,
                    'win_rate' => round(rand(4500, 7000) / 100, 2),
                    'kda_ratio' => round(rand(120, 300) / 100, 2),
                    'headshot_pct' => round(rand(1800, 3000) / 100, 2),
                    'total_kills' => $kills,
                    'average_damage' => rand(140, 250),
                ]);
            }
        }
    }

    /**
     * Generate realistic gamertags
     */
    private function generateGamertag(): string
    {
        $adjectives = [
            'Silent', 'Toxic', 'Rapid', 'Deadly', 'Shadow', 'Cracked', 'Wicked', 'Frost', 'Lone', 'Stealthy',
            'Ghostly', 'Cyber', 'Elite', 'Dark', 'Blazing', 'Icy', 'Flaming', 'Crazy', 'NoScope', 'Lucky'
        ];

        $nouns = [
            'Ghost', 'Aim', 'Hunter', 'Wolf', 'Blade', 'Phoenix', 'Viper', 'Demon', 'Llama', 'Agent',
            'Sniper', 'Scout', 'Beast', 'Dragon', 'Rogue', 'Spectre', 'Sage', 'Ninja', 'Striker', 'Sentinel'
        ];

        $suffixes = [
            '', rand(0, 9), rand(10, 99), '_' . rand(10, 99), 'x', 'YT', 'TV', '_' . chr(rand(65, 90))
        ];

        $adj = $adjectives[array_rand($adjectives)];
        $noun = $nouns[array_rand($nouns)];
        $suffix = $suffixes[array_rand($suffixes)];

        $formats = [
            "$adj$noun$suffix",
            "x$adj$noun",
            "$noun$adj$suffix",
            "$adj\_$noun$suffix",
            "$adj$noun" . rand(10, 999)
        ];

        return $formats[array_rand($formats)];
    }
}
